# Multi-stage optimized Dockerfile for ComfyUI on Paperspace A6000
# Reduces deployment time from 15-20 minutes to 1-2 minutes

# Base stage with CUDA 12.4 and Python 3.11
FROM nvidia/cuda:12.4-devel-ubuntu22.04 AS base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip \
    git \
    wget \
    curl \
    unzip \
    build-essential \
    cmake \
    ninja-build \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgoogle-perftools4 \
    libtcmalloc-minimal4 \
    && rm -rf /var/lib/apt/lists/*

# Create symlinks for python3.11
RUN ln -sf /usr/bin/python3.11 /usr/bin/python3 && \
    ln -sf /usr/bin/python3.11 /usr/bin/python

# Upgrade pip and install wheel
RUN python3 -m pip install --upgrade pip setuptools wheel

# Python dependencies stage
FROM base AS python-deps

# Set working directory
WORKDIR /app

# Install PyTorch with CUDA 12.4 support (optimized for A6000)
RUN pip install --no-cache-dir \
    torch==2.4.1+cu124 \
    torchvision==0.19.1+cu124 \
    torchaudio==2.4.1+cu124 \
    --index-url https://download.pytorch.org/whl/cu124

# Install xformers with Flash Attention (pre-compiled for A6000)
RUN pip install --no-cache-dir xformers==0.0.28.post1

# Install core ComfyUI dependencies
RUN pip install --no-cache-dir \
    # Core ML/AI libraries
    transformers==4.44.2 \
    diffusers==0.30.2 \
    accelerate==0.34.2 \
    safetensors==0.4.4 \
    tokenizers==0.19.1 \
    sentencepiece==0.2.0 \
    protobuf==4.25.4 \
    # Image processing
    Pillow==10.4.0 \
    opencv-python==4.10.0.84 \
    imageio==2.35.1 \
    scikit-image==0.24.0 \
    # Audio processing
    librosa==0.10.2.post1 \
    soundfile==0.12.1 \
    # HTTP and API
    requests==2.32.3 \
    aiohttp==3.10.5 \
    websockets==13.0.1 \
    # Utilities
    tqdm==4.66.5 \
    numpy==1.26.4 \
    scipy==1.14.1 \
    psutil==6.0.0 \
    pyyaml==6.0.2 \
    # Development tools
    GitPython==3.1.43 \
    huggingface-hub==0.24.6 \
    # ComfyUI specific
    folder-paths==0.1.0 \
    model-management==0.1.0

# Additional ML libraries for advanced nodes
RUN pip install --no-cache-dir \
    controlnet-aux==0.0.9 \
    insightface==0.7.3 \
    facexlib==0.3.0 \
    gfpgan==1.3.8 \
    realesrgan==0.3.0 \
    kornia==0.7.3 \
    lpips==0.1.4 \
    clip-interrogator==0.6.0 \
    compel==2.0.3 \
    invisible-watermark==0.2.0

# ComfyUI installation stage
FROM python-deps AS comfyui-base

# Clone ComfyUI
RUN git clone https://github.com/comfyanonymous/ComfyUI.git /app/ComfyUI && \
    cd /app/ComfyUI && \
    git checkout master

# Install ComfyUI requirements
WORKDIR /app/ComfyUI
RUN pip install --no-cache-dir -r requirements.txt

# Custom nodes installation stage
FROM comfyui-base AS custom-nodes

WORKDIR /app/ComfyUI/custom_nodes

# Install popular custom nodes
RUN git clone https://github.com/ltdrdata/ComfyUI-Manager.git && \
    git clone https://github.com/Fannovel16/comfyui_controlnet_aux.git && \
    git clone https://github.com/cubiq/ComfyUI_IPAdapter_plus.git && \
    git clone https://github.com/WASasquatch/was-node-suite-comfyui.git && \
    git clone https://github.com/pythongosssss/ComfyUI-Custom-Scripts.git && \
    git clone https://github.com/rgthree/rgthree-comfy.git && \
    git clone https://github.com/ltdrdata/ComfyUI-Impact-Pack.git && \
    git clone https://github.com/Suzie1/ComfyUI_Comfyroll_CustomNodes.git && \
    git clone https://github.com/melMass/comfy_mtb.git && \
    git clone https://github.com/BadCafeCode/execution-inversion-demo-comfyui.git

# Install custom node dependencies
RUN for dir in */; do \
        if [ -f "$dir/requirements.txt" ]; then \
            echo "Installing requirements for $dir"; \
            pip install --no-cache-dir -r "$dir/requirements.txt" || true; \
        fi; \
    done

# Models pre-download stage
FROM custom-nodes AS model-cache

# Create model directories
RUN mkdir -p /app/ComfyUI/models/{checkpoints,vae,loras,controlnet,clip_vision,style_models,upscale_models,embeddings}

# Download essential models (popular and lightweight ones)
WORKDIR /app/ComfyUI/models

# Download CLIP models
RUN mkdir -p clip_vision && cd clip_vision && \
    wget -O clip_vision_vit_l.safetensors "https://huggingface.co/openai/clip-vit-large-patch14/resolve/main/pytorch_model.bin" || true

# Download VAE models
RUN cd vae && \
    wget -O vae-ft-mse-840000-ema-pruned.safetensors "https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors" || true

# Download ControlNet models (essential ones)
RUN cd controlnet && \
    wget -O canny.safetensors "https://huggingface.co/lllyasviel/sd-controlnet-canny/resolve/main/diffusion_pytorch_model.safetensors" || true

# Download upscale models
RUN cd upscale_models && \
    wget -O RealESRGAN_x4plus.pth "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth" || true

# Final production stage
FROM model-cache AS production

# Set proper ownership and permissions
RUN chown -R 1000:1000 /app && \
    chmod -R 755 /app

# Create non-root user for security
RUN groupadd -r comfyui && useradd -r -g comfyui comfyui
USER comfyui

# Expose ports
EXPOSE 8188 6006

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8188/system_stats || exit 1

# Set working directory
WORKDIR /app/ComfyUI

# Copy entrypoint script
COPY --chown=comfyui:comfyui entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Environment variables
ENV COMFYUI_PATH=/app/ComfyUI
ENV PYTHONPATH=/app/ComfyUI
ENV TCMALLOC_LARGE_ALLOC_REPORT_THRESHOLD=10737418240
ENV LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libtcmalloc.so.4

# Use entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["python", "main.py", "--listen", "0.0.0.0", "--port", "8188", "--output-directory", "/app/ComfyUI/output"]